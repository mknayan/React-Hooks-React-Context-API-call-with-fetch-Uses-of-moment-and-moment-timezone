[{"/home/mknayan/React-Projects/Inter/craftsmen/src/index.js":"1","/home/mknayan/React-Projects/Inter/craftsmen/src/App.js":"2","/home/mknayan/React-Projects/Inter/craftsmen/src/reportWebVitals.js":"3","/home/mknayan/React-Projects/Inter/craftsmen/src/context/GlobalState.js":"4","/home/mknayan/React-Projects/Inter/craftsmen/src/components/SearchBox.jsx":"5","/home/mknayan/React-Projects/Inter/craftsmen/src/components/SearchResults.jsx":"6","/home/mknayan/React-Projects/Inter/craftsmen/src/components/CountryDetails.jsx":"7","/home/mknayan/React-Projects/Inter/craftsmen/src/context/AppReducer.js":"8","/home/mknayan/React-Projects/Inter/craftsmen/src/components/CountryTime.jsx":"9"},{"size":500,"mtime":1607666818125,"results":"10","hashOfConfig":"11"},{"size":569,"mtime":1607689498571,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1607666818125,"results":"13","hashOfConfig":"11"},{"size":1146,"mtime":1607690999818,"results":"14","hashOfConfig":"11"},{"size":2025,"mtime":1607695172373,"results":"15","hashOfConfig":"11"},{"size":1827,"mtime":1607695231963,"results":"16","hashOfConfig":"11"},{"size":1807,"mtime":1607692647758,"results":"17","hashOfConfig":"11"},{"size":538,"mtime":1607692248340,"results":"18","hashOfConfig":"11"},{"size":1648,"mtime":1607697976665,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"mamell",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"/home/mknayan/React-Projects/Inter/craftsmen/src/index.js",[],["44","45"],"/home/mknayan/React-Projects/Inter/craftsmen/src/App.js",[],"/home/mknayan/React-Projects/Inter/craftsmen/src/reportWebVitals.js",[],"/home/mknayan/React-Projects/Inter/craftsmen/src/context/GlobalState.js",[],"/home/mknayan/React-Projects/Inter/craftsmen/src/components/SearchBox.jsx",["46","47","48"],"import React, { Suspense, useState, useEffect, useContext } from \"react\";\nimport cityTimezones from \"city-timezones\";\n\nimport { GlobalContext } from '../context/GlobalState';\n\nconst fetchCountry = query => {\n    const url = 'https://restcountries.eu/rest/v2/capital/' + query;\n    return fetch(url).then(function (response) {\n        return response.json();\n    })\n};\n\nconst SearchBox = () => {\n\n    const [query, setQuery] = useState('dhaka');\n    const [country, setCountry] = useState([]);\n    const { updateCountryList, updateSelectedCountry, updateSelectedTimeZone } = useContext(GlobalContext);\n\n    useEffect(() => {\n        async function fetchData() {\n            updateCountryList([])\n            updateSelectedCountry('')\n            updateSelectedTimeZone('')\n            if (query != '') {\n                await fetchCountry(query).then(function (data) {\n                    if (data.status) {\n                        setCountry([])\n                    } else {\n                        setCountry(data)\n                        updateCountryList(data)\n                        updateSelectedCountry(data[0])\n\n                        if (data[0].capital) {\n                            const timezoneArray = cityTimezones.lookupViaCity(data[0].capital)\n                            let timezone = ''\n                            if (timezoneArray && timezoneArray.length > 0) {\n                                timezone = timezoneArray[0].timezone\n                            }\n                            updateSelectedTimeZone(timezone)\n                        }\n                    }\n                })\n            }\n        }\n        fetchData()\n    }, [query]);\n\n    return (\n        <Suspense>\n            <div className=\"col-md-4\">\n                <p className=\"text-center\"><b>Search with capital</b></p>\n                <input type=\"text\" name=\"search\" className=\"form-control\" value={query} onChange={e => setQuery(e.target.value)} />\n            </div>\n        </Suspense>\n    )\n};\n\nexport default SearchBox;","/home/mknayan/React-Projects/Inter/craftsmen/src/components/SearchResults.jsx",["49","50"],"import React, { Suspense, useContext, Fragment } from \"react\";\nimport cityTimezones from \"city-timezones\";\n\nimport { GlobalContext } from '../context/GlobalState';\n\nconst SearchResults = () => {\n\n    const { updateSelectedCountry, updateSelectedTimeZone, countries, selectedCountry } = useContext(GlobalContext);\n\n    const handleClick = (data) => {\n        updateSelectedCountry(data)\n\n        const timezoneArray = cityTimezones.lookupViaCity(data.capital)\n        let timezone = ''\n        if (timezoneArray && timezoneArray.length > 0) {\n            timezone = timezoneArray[0].timezone\n        }\n        updateSelectedTimeZone(timezone)\n    }\n\n    return (\n        <Suspense>\n            <div className=\"col-md-4 left-border\">\n                <p className=\"text-center\"><b>Results</b></p>\n                <div className=\"results\">\n                    <ul>\n                        {\n                            countries.length > 0 ?\n                                <Fragment>\n                                    {\n                                        countries.map((countries_single, countries_index) => {\n                                            return (\n                                                <li key={`country-${countries_index}`} onClick={() => handleClick(countries_single)} className={selectedCountry != '' ? (selectedCountry.name == countries_single.name ? 'active' : '') : ''}>{countries_single.name}</li>\n                                            )\n                                        })\n                                    }\n                                </Fragment>\n                                :\n                                ''\n                        }\n                    </ul>\n                </div>\n            </div>\n        </Suspense>\n    )\n};\n\nexport default SearchResults;","/home/mknayan/React-Projects/Inter/craftsmen/src/components/CountryDetails.jsx",["51","52"],"import React, { Fragment, Suspense, useContext } from \"react\";\n\nimport CountryTime from './CountryTime';\nimport { GlobalContext } from '../context/GlobalState';\n\nconst CountryDetails = () => {\n\n    const { selectedCountry } = useContext(GlobalContext);\n\n    return (\n        <Suspense>\n            <div className=\"col-md-4 left-border\">\n                <p className=\"text-center\"><b>Country Details</b></p>\n                {\n                    selectedCountry != '' ?\n                        <Fragment>\n                            <div className=\"text-center\">\n                                Country Name: {selectedCountry.name}<br />\n                                Capital: {selectedCountry.capital}<br />\n                                Languages:&nbsp;\n                                {\n                                    selectedCountry.languages && selectedCountry.languages.length > 0 ?\n                                        <Fragment>\n                                            {\n                                                selectedCountry.languages.map((languages_single, languages_index) => {\n                                                    return languages_single.name + ' '\n                                                })\n                                            }\n                                        </Fragment>\n                                        : ''\n                                }\n                                <br />\n                                Flag: <img src={selectedCountry.flag} />\n                            </div>\n                            <CountryTime />\n                        </Fragment>\n                        :\n                        ''\n                }\n\n\n            </div>\n        </Suspense>\n    )\n};\n\nexport default CountryDetails;","/home/mknayan/React-Projects/Inter/craftsmen/src/context/AppReducer.js",["53"],"export default (state, action) => {\n    switch (action.type) {\n        case 'UPDATE_COUNTRY':\n            return {\n                ...state,\n                countries: action.payload\n            };\n        case 'UPDATE_SELECTED_COUNTRY':\n            return {\n                ...state,\n                selectedCountry: action.payload\n            };\n        case 'UPDATE_SELECTED_TIMEZONE':\n            return {\n                ...state,\n                selectedTimezone: action.payload\n            };\n        default: return state;\n    }\n}","/home/mknayan/React-Projects/Inter/craftsmen/src/components/CountryTime.jsx",["54","55","56","57","58"],"import React, { Suspense, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport tim from 'moment-timezone'\nimport cityTimezones from \"city-timezones\";\n\nimport { GlobalContext } from '../context/GlobalState';\n\nlet selectedTimezoneVar = ''\nlet GetTimeNow = setInterval(function () {\n    const elementExists = document.getElementById(\"timenow\");\n    if (elementExists) {\n        if (selectedTimezoneVar != '') {\n            const time_moment = moment().tz(selectedTimezoneVar).format(\"hh:mm:ss a\");\n            document.getElementById(\"timenow\").innerHTML = time_moment;\n        } else {\n            document.getElementById(\"timenow\").innerHTML = \"Timezone not found\";\n        }\n    }\n}, 1000)\n\nconst CountryTime = () => {\n\n    const { selectedTimezone } = useContext(GlobalContext);\n    selectedTimezoneVar = selectedTimezone;\n    useEffect(() => {\n        let GetTimeNow = setInterval(function () {\n            const elementExists = document.getElementById(\"timenow\");\n            if (elementExists) {\n                if (selectedTimezoneVar != '') {\n                    const time_moment = moment().tz(selectedTimezoneVar).format(\"hh:mm:ss a\");\n                    document.getElementById(\"timenow\").innerHTML = time_moment;\n                } else {\n                    document.getElementById(\"timenow\").innerHTML = \"Timezone not found\";\n                }\n            }\n        }, 1000)\n        clearInterval(GetTimeNow)\n    }, [selectedTimezone]);\n\n    return (\n        <Suspense>\n            <div className=\"text-center\">Country Time: <span id=\"timenow\"></span></div>\n        </Suspense>\n    )\n};\n\nexport default CountryTime;",{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":16,"column":12,"nodeType":"65","messageId":"66","endLine":16,"endColumn":19},{"ruleId":"67","severity":1,"message":"68","line":24,"column":23,"nodeType":"69","messageId":"70","endLine":24,"endColumn":25},{"ruleId":"71","severity":1,"message":"72","line":46,"column":8,"nodeType":"73","endLine":46,"endColumn":15,"suggestions":"74"},{"ruleId":"67","severity":1,"message":"68","line":33,"column":161,"nodeType":"69","messageId":"70","endLine":33,"endColumn":163},{"ruleId":"67","severity":1,"message":"75","line":33,"column":191,"nodeType":"69","messageId":"70","endLine":33,"endColumn":193},{"ruleId":"67","severity":1,"message":"68","line":15,"column":37,"nodeType":"69","messageId":"70","endLine":15,"endColumn":39},{"ruleId":"76","severity":1,"message":"77","line":33,"column":39,"nodeType":"78","endLine":33,"endColumn":73},{"ruleId":"79","severity":1,"message":"80","line":1,"column":1,"nodeType":"81","endLine":20,"endColumn":2},{"ruleId":"63","severity":1,"message":"82","line":3,"column":8,"nodeType":"65","messageId":"66","endLine":3,"endColumn":11},{"ruleId":"63","severity":1,"message":"83","line":4,"column":8,"nodeType":"65","messageId":"66","endLine":4,"endColumn":21},{"ruleId":"63","severity":1,"message":"84","line":9,"column":5,"nodeType":"65","messageId":"66","endLine":9,"endColumn":15},{"ruleId":"67","severity":1,"message":"68","line":12,"column":33,"nodeType":"69","messageId":"70","endLine":12,"endColumn":35},{"ruleId":"67","severity":1,"message":"68","line":29,"column":41,"nodeType":"69","messageId":"70","endLine":29,"endColumn":43},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'country' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'updateCountryList', 'updateSelectedCountry', and 'updateSelectedTimeZone'. Either include them or remove the dependency array.","ArrayExpression",["87"],"Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'tim' is defined but never used.","'cityTimezones' is defined but never used.","'GetTimeNow' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [query, updateCountryList, updateSelectedCountry, updateSelectedTimeZone]",{"range":"90","text":"91"},[1663,1670],"[query, updateCountryList, updateSelectedCountry, updateSelectedTimeZone]"]